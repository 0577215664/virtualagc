#############################################################################
# Copyright:    Public domain
# Filename:     SuperJob.binsource2.txt
# Purpose:      This file is part of the VirtualAGC project.  It is
#               an ASCII file used to input the SUPER JOB executable
#               in octal format.  The actual octal (usable by the 
#               yaAGC program) must be created by a two-step process:
#               1. Must be processed by Binsource2Bin.c to create
#                  an ASCII octal file compatible with the Oct2Bin.c 
#                  program; and then
#               2. Must be processed with the Oct2Bin program (which
#                  may be found in the Tools directory).
#               This two-step process is the same as that used for
#               Colossus 237, in which the original assembly listing 
#               did not have an octal listing at the end, necessitating 
#               getting the octal codes directly from the source pages, 
#               which in turn necessitated a different data-entry format.  
#               That same format is used here.
# Website:      http://www.ibiblio.org/apollo 
# Contact:      info@sandroid.org
# Mods:         2017-01-28 MAS  Created from Colossus 237.
#
# This file contains the complete set of octal codes, except for the 
# so-called "bugger words" (which are missing from the assembly listing
# and hence have to be generated by Binsource2Bin).  It consists primarily
# of 5-digit octal codes delimited by commas or newlines.  Other white
# space (such as spaces or empty lines) are ignored during processing, 
# as are trailing commas at the ends of lines.  Except as described in 
# the next paragraph, the octal codes are supposed to be at successive 
# memory locations. Comments are preceded by '#'.
#
# In addition to the octal codes, there are several pseudo-ops which can
# appear, each on a separate line:
#
#   1.  pN or .N --- Indicates a page change in the assembly listing.
#       N is any integer decimal number.
#   2.  aMMMM or &MMMM or +MMMM or aNN,NNNN or &NN,NNNN
#       or +NN,NNNN --- Indicates a change of address.  In other words,
#       the *next* octal code encountered will be at the indicated address, 
#       regardless of the address of any prior octal codes.   MMMM is a 
#       4-digit octal number in the range       4000-7777.  NN is a 2-digit octal
#       number which is one of 00, 01, or 04-43.  NNNN is a 4-digit octal 
#       number in the range 2000-3777.
#   3.  cMMMM or :MMMM or cNN,NNNN or :NN,NNNN --- Indicates the address
#       of the last octal code encountered.  It is not an *active* 
#       command, in that it does not indicate that the address is changed
#       from what it otherwise have been (the way the 'a' command does),
#       but instead indicates a check that should be performed.  These
#       checkpoints should be inserted prior to any 'p', '.', 'a', or '&',
#       pseudo-op.  The Binsource2Bin.c processing displays an error 
#       message wherever these checkpoints don't match properly, making
#       it easier to localize certain types of data-entry errors to the
#       specific assembly-language page, thus making them much easier to
#       find and correct.
#
# The reason there are 2-3 forms of each pseudo-op ('p' vs. '.', 'a' vs. '&' vs. '+',
# 'c' vs. ':') is that the alphabetic forms are preferable from the 
# standpoint of readability, while the punctuation forms cater to certain
# quirks in the data-entry method used.  (The speech-recognition program
# Dragon NaturallySpeaking was used for dictating the data.  To improve
# recognition accuracy, the program was placed in its "numbers mode", which
# recognizes only numbers and certain punctuation.  Therefore, by using the
# punctuation forms of the pseudo-ops, data entry could be performed entirely
# by voice, without recourse to keyboard.  Unfortunately, different versions
# of Dragon allow different punctuation symbols to be dictated, hence the
# existence of several alternatives in some cases.)
#
# It's likely that after initial data entry, I'll normalize all of the data
# by getting rid of the excess spaces, and converting the punctuation forms
# of pseudo-ops to their alphabetic forms.
#############################################################################

# We have parities, but no banksums.
y
n
# The first page is simply a note about possible tweaks to the program.
p1
# The next two pages, and part of page 4, are erasable assignments with
# no octals.
p2
p3
p4
a4000
000040
060171
000211
000010
500171
000001
010101
500001
500171
000301
000370
000340
c4013
p5
144440
000020
000320
003601
144621
000171
000121
017400
141071
001000
000400
777371
141151
074460
052240
053211
053620
054110
054350
055040
055040
055100
055230
073461
055260
055310
055340
070321
070401
073011
055370
044711
044750
045011
076170
076231
040600
040611
040621
520251
520030
520311
520330
520170
520360
520341
520231
520350
520371
532401
521400
534401
535400
527400
537000
536001
531401
536400
c4105
p6
537401
520110
000061
220121
000061
000150
041221
520110
000061
220121
000061
000160
740121
541100
401100
643210
100000
041351
060001
041351
300070
541661
041711
401100
640021
100000
042040
060001
042040
300070
541661
000061
000271
361101
000061
010071
340030
541141
340050
541150
541070
541061
340071
000061
010101
340060
100000
041640
000061
010101
044540
340050
541150
541141
541061
541070
000061
000111
c4177
p7
