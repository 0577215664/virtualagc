// -*- C++ -*-
//
// generated by wxGlade 0.6.8 on Sat Sep 10 08:02:28 2016
//
// Example for compiling a single file project under Linux using g++:
//  g++ MyApp.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp
//
// Example for compiling a multi file project under Linux using g++:
//  g++ main.cpp $(wx-config --libs) $(wx-config --cxxflags) -o MyApp Dialog1.cpp Frame1.cpp
//

#include <wx/stdpaths.h>
#include "yaDSKYb1.h"

// begin wxGlade: ::extracode
// end wxGlade
MyFrame* frame;

BEGIN_EVENT_TABLE(wxImagePanel, wxPanel)
// some useful events
/*
 EVT_MOTION(wxImagePanel::mouseMoved)
 EVT_LEFT_DOWN(wxImagePanel::mouseDown)
 EVT_LEFT_UP(wxImagePanel::mouseReleased)
 EVT_RIGHT_DOWN(wxImagePanel::rightClick)
 EVT_LEAVE_WINDOW(wxImagePanel::mouseLeftWindow)
 EVT_KEY_DOWN(wxImagePanel::keyPressed)
 EVT_KEY_UP(wxImagePanel::keyReleased)
 EVT_MOUSEWHEEL(wxImagePanel::mouseWheelMoved)
 */

// catch paint events
EVT_PAINT(wxImagePanel::paintEvent)

END_EVENT_TABLE()

// some useful events
/*
 void wxImagePanel::mouseMoved(wxMouseEvent& event) {}
 void wxImagePanel::mouseDown(wxMouseEvent& event) {}
 void wxImagePanel::mouseWheelMoved(wxMouseEvent& event) {}
 void wxImagePanel::mouseReleased(wxMouseEvent& event) {}
 void wxImagePanel::rightClick(wxMouseEvent& event) {}
 void wxImagePanel::mouseLeftWindow(wxMouseEvent& event) {}
 void wxImagePanel::keyPressed(wxKeyEvent& event) {}
 void wxImagePanel::keyReleased(wxKeyEvent& event) {}
 */

wxImagePanel::wxImagePanel(wxFrame* parent, wxString file, wxBitmapType format) :
wxPanel(parent)
  {
    // load the file... ideally add a check to see if loading was successful
    image.LoadFile(file, format);
  }

/*
 * Called by the system of by wxWidgets when the panel needs
 * to be redrawn. You can also trigger this call by
 * calling Refresh()/Update().
 */

void
wxImagePanel::paintEvent(wxPaintEvent & evt)
{
  // depending on your system you may need to look at double-buffered dcs
  wxPaintDC dc(this);
  render(dc);
}

/*
 * Alternatively, you can use a clientDC to paint on the panel
 * at any time. Using this generally does not free you from
 * catching paint events, since it is possible that e.g. the window
 * manager throws away your drawing when the window comes to the
 * background, and expects you will redraw it when the window comes
 * back (by sending a paint event).
 */
void
wxImagePanel::paintNow()
{
  // depending on your system you may need to look at double-buffered dcs
  wxClientDC dc(this);
  render(dc);
}

/*
 * Here we do the actual rendering. I put it in a separate
 * method so that it can work no matter what type of DC
 * (e.g. wxPaintDC or wxClientDC) is used.
 */
void
wxImagePanel::render(wxDC& dc)
{
  dc.DrawBitmap(image, 0, 0, false);
}

MyFrame::MyFrame(wxWindow* parent, int id, const wxString& title,
    const wxPoint& pos, const wxSize& size, long style) :
    wxFrame(parent, id, title, pos, size, wxDEFAULT_FRAME_STYLE)
{
  // begin wxGlade: MyFrame::MyFrame

  panel = new wxImagePanel(this,
      wxT("yaDSKYb1/images/Block1DSKY-face-bare.png"), wxBITMAP_TYPE_PNG);

  UpTelAccept = false;
  imageUpTelBlock = wxBitmap(wxT("yaDSKYb1/images/UpTel-block-20x40.png"),
      wxBITMAP_TYPE_ANY);
  imageUpTelAccept = wxBitmap(wxT("yaDSKYb1/images/UpTel-accept-20x40.png"),
      wxBITMAP_TYPE_ANY);
  image7Seg0 = wxBitmap(wxT("yaDSKYb1/images/7Seg-0-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg15 = wxBitmap(wxT("yaDSKYb1/images/7Seg-15-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg19 = wxBitmap(wxT("yaDSKYb1/images/7Seg-19-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg21 = wxBitmap(wxT("yaDSKYb1/images/7Seg-21-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg25 = wxBitmap(wxT("yaDSKYb1/images/7Seg-25-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg27 = wxBitmap(wxT("yaDSKYb1/images/7Seg-27-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg28 = wxBitmap(wxT("yaDSKYb1/images/7Seg-28-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg29 = wxBitmap(wxT("yaDSKYb1/images/7Seg-29-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg30 = wxBitmap(wxT("yaDSKYb1/images/7Seg-30-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg31 = wxBitmap(wxT("yaDSKYb1/images/7Seg-31-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  image7Seg3 = wxBitmap(wxT("yaDSKYb1/images/7Seg-3-33x38.jpg"),
      wxBITMAP_TYPE_ANY);
  imageCheckFailOn = wxBitmap(wxT("yaDSKYb1/images/CheckFail-on-63x44.png"),
      wxBITMAP_TYPE_ANY);
  imageCheckFailOff = wxBitmap(wxT("yaDSKYb1/images/CheckFail-off-63x44.png"),
      wxBITMAP_TYPE_ANY);
  imageCompOn = wxBitmap(wxT("yaDSKYb1/images/Comp-on-43x37.png"),
      wxBITMAP_TYPE_ANY);
  imageCompOff = wxBitmap(wxT("yaDSKYb1/images/Comp-off-43x37.png"),
      wxBITMAP_TYPE_ANY);
  imagePlusMinusPlus = wxBitmap(wxT("yaDSKYb1/images/PlusMinus-plus-28x38.jpg"),
      wxBITMAP_TYPE_ANY);
  imagePlusMinusMinus = wxBitmap(
      wxT("yaDSKYb1/images/PlusMinus-minus-28x38.jpg"), wxBITMAP_TYPE_ANY);
  imagePlusMinusOff = wxBitmap(wxT("yaDSKYb1/images/PlusMinus-off-28x38.jpg"),
      wxBITMAP_TYPE_ANY);
  imageUptlOn = wxBitmap(wxT("yaDSKYb1/images/Uptl-on-43x37.png"),
      wxBITMAP_TYPE_ANY);
  imageUptlOff = wxBitmap(wxT("yaDSKYb1/images/Uptl-off-43x37.png"),
      wxBITMAP_TYPE_ANY);
  imageCompFailOn = wxBitmap(wxT("yaDSKYb1/images/CompFail-on-63x44.png"),
      wxBITMAP_TYPE_ANY);
  imageCompFailOff = wxBitmap(wxT("yaDSKYb1/images/CompFail-off-63x44.png"),
      wxBITMAP_TYPE_ANY);

  indicatorCompFail = new wxStaticBitmap(panel, wxID_ANY, imageCompFailOff);
  indicatorCheckFail = new wxStaticBitmap(panel, wxID_ANY, imageCheckFailOff);
  indicatorUpTl = new wxStaticBitmap(panel, wxID_ANY, imageUptlOff);
  indicatorComp = new wxStaticBitmap(panel, wxID_ANY, imageCompOff);
  digitProgramLeft = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  digitProgramRight = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  digitVerbLeft = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  digitVerbRight = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  digitNounLeft = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  digitNounRight = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  PlusMinusReg1 = new wxStaticBitmap(panel, wxID_ANY, imagePlusMinusOff);
  Digit1Reg1 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit2Reg1 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit3Reg1 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit4Reg1 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit5Reg1 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  PlusMinusReg2 = new wxStaticBitmap(panel, wxID_ANY, imagePlusMinusOff);
  Digit1Reg2 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit2Reg2 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit3Reg2 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit4Reg2 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit5Reg2 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  PlusMinusReg3 = new wxStaticBitmap(panel, wxID_ANY, imagePlusMinusOff);
  Digit1Reg3 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit2Reg3 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit3Reg3 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit4Reg3 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  Digit5Reg3 = new wxStaticBitmap(panel, wxID_ANY, image7Seg0);
  SwitchUpTel = new wxBitmapButton(panel, ID_UPTELSWITCH, imageUpTelBlock);
  ButtonKeyRlse = new wxBitmapButton(panel, ID_KEYRLSEBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/KeyRlse-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonErrorReset = new wxBitmapButton(panel, ID_ERRORRESETBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/ErrorReset-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonClear = new wxBitmapButton(panel, ID_CLEARBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/Clear-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonVerb = new wxBitmapButton(panel, ID_VERBBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/Verb-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonNoun = new wxBitmapButton(panel, ID_NOUNBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/Noun-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonEnter = new wxBitmapButton(panel, ID_ENTERBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/Enter-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonPlus = new wxBitmapButton(panel, ID_PLUSBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/Plus-60x60.png"), wxBITMAP_TYPE_ANY));
  Button7 = new wxBitmapButton(panel, ID_SEVENBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/7-60x60.png"), wxBITMAP_TYPE_ANY));
  Button8 = new wxBitmapButton(panel, ID_EIGHTBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/8-60x60.png"), wxBITMAP_TYPE_ANY));
  Button9 = new wxBitmapButton(panel, ID_NINEBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/9-60x60.png"), wxBITMAP_TYPE_ANY));
  ButtonMinus = new wxBitmapButton(panel, ID_MINUSBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/Minus-60x60.png"), wxBITMAP_TYPE_ANY));
  Button4 = new wxBitmapButton(panel, ID_FOURBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/4-60x60.png"), wxBITMAP_TYPE_ANY));
  Button5 = new wxBitmapButton(panel, ID_FIVEBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/5-60x60.png"), wxBITMAP_TYPE_ANY));
  Button6 = new wxBitmapButton(panel, ID_SIXBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/6-60x60.png"), wxBITMAP_TYPE_ANY));
  Button0 = new wxBitmapButton(panel, ID_ZEROBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/0-60x60.png"), wxBITMAP_TYPE_ANY));
  Button1 = new wxBitmapButton(panel, ID_ONEBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/1-60x60.png"), wxBITMAP_TYPE_ANY));
  Button2 = new wxBitmapButton(panel, ID_TWOBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/2-60x60.png"), wxBITMAP_TYPE_ANY));
  Button3 = new wxBitmapButton(panel, ID_THREEBUTTON,
      wxBitmap(wxT("yaDSKYb1/images/3-60x60.png"), wxBITMAP_TYPE_ANY));

  set_properties();
  do_layout();
  // end wxGlade
}

void
MyFrame::set_properties()
{
  // begin wxGlade: MyFrame::set_properties
  SetTitle(_("yaDSKY Block 1 Control Panel"));
  SetBackgroundColour(wxColour(214, 214, 214));
  SwitchUpTel->SetSize(SwitchUpTel->GetBestSize());
  ButtonKeyRlse->SetMinSize(wxSize(60, 60));
  ButtonErrorReset->SetMinSize(wxSize(60, 60));
  ButtonClear->SetMinSize(wxSize(60, 60));
  ButtonVerb->SetMinSize(wxSize(60, 60));
  ButtonNoun->SetMinSize(wxSize(60, 60));
  ButtonEnter->SetMinSize(wxSize(60, 60));
  ButtonPlus->SetMinSize(wxSize(60, 60));
  Button7->SetMinSize(wxSize(60, 60));
  Button8->SetMinSize(wxSize(60, 60));
  Button9->SetMinSize(wxSize(60, 60));
  ButtonMinus->SetMinSize(wxSize(60, 60));
  Button4->SetMinSize(wxSize(60, 60));
  Button5->SetMinSize(wxSize(60, 60));
  Button6->SetMinSize(wxSize(60, 60));
  Button0->SetMinSize(wxSize(60, 60));
  Button1->SetMinSize(wxSize(60, 60));
  Button2->SetMinSize(wxSize(60, 60));
  Button3->SetMinSize(wxSize(60, 60));
  panel->SetBackgroundColour(wxColour(0, 0, 0));
  // end wxGlade
}

void
MyFrame::do_layout()
{
  // begin wxGlade: MyFrame::do_layout
  wxBoxSizer* sizer_1 = new wxBoxSizer(wxVERTICAL);
  wxBoxSizer* sizer_2 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_4 = new wxBoxSizer(wxVERTICAL);
  wxGridSizer* grid_sizer_1 = new wxGridSizer(4, 4, 2, 2); // Keypad
  wxBoxSizer* sizer_5 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_6 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_3 = new wxBoxSizer(wxVERTICAL);
  wxBoxSizer* sizer_7 = new wxBoxSizer(wxHORIZONTAL);
  wxGridSizer* grid_sizer_2 = new wxGridSizer(3, 6, 22, 1); // Registers.
  wxGridSizer* grid_sizer_3 = new wxGridSizer(2, 2, 21, 20); // Activity/Program/Verb/Noun
  wxBoxSizer* sizer_12_copy_1 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_12_copy = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_12 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_11 = new wxBoxSizer(wxHORIZONTAL);
  wxBoxSizer* sizer_8 = new wxBoxSizer(wxHORIZONTAL);
  sizer_2->Add(77, 20, 0, 0, 0); // Left margin
  sizer_3->Add(20, 55, 0, 0, 0);
  sizer_8->Add(39, 20, 0, 0, 0); // Left of CompFail.
  sizer_8->Add(indicatorCompFail, 0, 0, 0);
  sizer_8->Add(5, 20, 0, 0, 0); // Between CompFail and CheckFail
  sizer_8->Add(indicatorCheckFail, 0, 0, 0);
  sizer_8->Add(32, 20, 0, 0, 0); // Right of CheckFail
  sizer_3->Add(sizer_8, 0, 0, 0);
  sizer_3->Add(20, 113, 0, 0, 0);
  sizer_11->Add(0, 20, 0, 0, 0);
  sizer_11->Add(indicatorUpTl, 0, 0, 0);
  sizer_11->Add(1, 20, 0, 0, 0);
  sizer_11->Add(indicatorComp, 0, 0, 0);
  sizer_11->Add(5, 20, 0, 0, 0);
  grid_sizer_3->Add(sizer_11, 0, 0, 0);
  sizer_12->Add(11, 20, 0, 0, 0);
  sizer_12->Add(digitProgramLeft, 0, 0, 0);
  sizer_12->Add(5, 20, 0, 0, 0);
  sizer_12->Add(digitProgramRight, 0, 0, 0);
  sizer_12->Add(12, 20, 0, 0, 0);
  grid_sizer_3->Add(sizer_12, 0, 0, 0);
  sizer_12_copy->Add(7, 20, 0, 0, 0);
  sizer_12_copy->Add(digitVerbLeft, 0, 0, 0);
  sizer_12_copy->Add(5, 20, 0, 0, 0);
  sizer_12_copy->Add(digitVerbRight, 0, 0, 0);
  sizer_12_copy->Add(12, 20, 0, 0, 0);
  grid_sizer_3->Add(sizer_12_copy, 0, 0, 0);
  sizer_12_copy_1->Add(11, 20, 0, 0, 0);
  sizer_12_copy_1->Add(digitNounLeft, 0, 0, 0);
  sizer_12_copy_1->Add(5, 20, 0, 0, 0);
  sizer_12_copy_1->Add(digitNounRight, 0, 0, 0);
  sizer_12_copy_1->Add(12, 20, 0, 0, 0);
  grid_sizer_3->Add(sizer_12_copy_1, 0, 0, 0);
  sizer_3->Add(grid_sizer_3, 0, wxALIGN_CENTER_VERTICAL, 0);
  sizer_3->Add(20, 22, 0, 0, 0); // Between Reg1 and Verb/Noun
  grid_sizer_2->Add(PlusMinusReg1, 0, 0, 0);
  grid_sizer_2->Add(Digit1Reg1, 0, 0, 0);
  grid_sizer_2->Add(Digit2Reg1, 0, 0, 0);
  grid_sizer_2->Add(Digit3Reg1, 0, 0, 0);
  grid_sizer_2->Add(Digit4Reg1, 0, 0, 0);
  grid_sizer_2->Add(Digit5Reg1, 0, 0, 0);
  grid_sizer_2->Add(PlusMinusReg2, 0, 0, 0);
  grid_sizer_2->Add(Digit1Reg2, 0, 0, 0);
  grid_sizer_2->Add(Digit2Reg2, 0, 0, 0);
  grid_sizer_2->Add(Digit3Reg2, 0, 0, 0);
  grid_sizer_2->Add(Digit4Reg2, 0, 0, 0);
  grid_sizer_2->Add(Digit5Reg2, 0, 0, 0);
  grid_sizer_2->Add(PlusMinusReg3, 0, 0, 0);
  grid_sizer_2->Add(Digit1Reg3, 0, 0, 0);
  grid_sizer_2->Add(Digit2Reg3, 0, 0, 0);
  grid_sizer_2->Add(Digit3Reg3, 0, 0, 0);
  grid_sizer_2->Add(Digit4Reg3, 0, 0, 0);
  grid_sizer_2->Add(Digit5Reg3, 0, 0, 0);
  sizer_7->Add(grid_sizer_2, 0, 0, 0);
  sizer_3->Add(sizer_7, 0, 0, 0);
  sizer_3->Add(20, 74, 0, 0, 0); // Below Reg3.
  sizer_2->Add(sizer_3, 0, 0, 0);
  sizer_2->Add(31, 20, 0, 0, 0); // Middle horizontal spacer.
  sizer_4->Add(20, 46, 0, 0, 0); // Above SwitchUptel
  sizer_6->Add(15, 20, 0, 0, 0); // Left of SwitchUptel
  sizer_6->Add(SwitchUpTel, 0, 0, 0);
  sizer_6->Add(184, 20, 0, 0, 0); // Right of SwitchUpTel
  sizer_4->Add(sizer_6, 0, 0, 0);
  sizer_4->Add(20, 101, 0, 0, 0); // Between KeyRlse and SwitchUpTel
  sizer_5->Add(ButtonKeyRlse, 0, 0, 0);
  sizer_5->Add(125, 20, 0, 0, 0); // Between KeyRlse and ErrorReset
  sizer_5->Add(ButtonErrorReset, 0, 0, 0);
  sizer_4->Add(sizer_5, 0, 0, 0);
  sizer_4->Add(20, 6, 0, 0, 0); // Between KeyRlse and Keypad
  grid_sizer_1->Add(ButtonClear, 0, 0, 0);
  grid_sizer_1->Add(ButtonVerb, 0, 0, 0);
  grid_sizer_1->Add(ButtonNoun, 0, 0, 0);
  grid_sizer_1->Add(ButtonEnter, 0, 0, 0);
  grid_sizer_1->Add(ButtonPlus, 0, 0, 0);
  grid_sizer_1->Add(Button7, 0, 0, 0);
  grid_sizer_1->Add(Button8, 0, 0, 0);
  grid_sizer_1->Add(Button9, 0, 0, 0);
  grid_sizer_1->Add(ButtonMinus, 0, 0, 0);
  grid_sizer_1->Add(Button4, 0, 0, 0);
  grid_sizer_1->Add(Button5, 0, 0, 0);
  grid_sizer_1->Add(Button6, 0, 0, 0);
  grid_sizer_1->Add(Button0, 0, 0, 0);
  grid_sizer_1->Add(Button1, 0, 0, 0);
  grid_sizer_1->Add(Button2, 0, 0, 0);
  grid_sizer_1->Add(Button3, 0, 0, 0);
  sizer_4->Add(grid_sizer_1, 0, 0, 0);
  sizer_4->Add(20, 63, 0, 0, 0); // Below keypad
  sizer_2->Add(sizer_4, 0, 0, 0);
  sizer_2->Add(26, 20, 0, 0, 0);
  panel->SetSizer(sizer_2);
  sizer_1->Add(panel, 1, 0, 0);
  SetSizer(sizer_1);
  sizer_1->Fit(this);
  Layout();
  // end wxGlade
}

class MyApp : public wxApp
{
public:
  bool
  OnInit();
protected:
  wxLocale m_locale;  // locale we'll be using
};

IMPLEMENT_APP (MyApp)

bool
MyApp::OnInit()
{
  m_locale.Init();
#ifdef APP_LOCALE_DIR
  m_locale.AddCatalogLookupPathPrefix(wxT(APP_LOCALE_DIR));
#endif
  m_locale.AddCatalog(wxT(APP_CATALOG));

  for (int i = 1; i < argc; i++)
    {
      wxString Arg = argv[i];
      wxString ArgStart = Arg.BeforeFirst ('=');
      wxString ArgEnd = Arg.AfterFirst ('=');

      if (ArgStart.IsSameAs (wxT ("--port")))
        {
          long lPortnum;
          ArgEnd.ToLong (&lPortnum);
          Portnum = lPortnum;
          if (Portnum <= 0 || Portnum >= 0x10000)
            {
              printf ("The --port switch is out of range.  Must be 1-64K.\n");
              goto Help;
            }
        }
      else
        {
        Help:
          printf ("USAGE:\n");
          printf ("\tyaDSKYb1 [OPTIONS]\n");
          printf ("The available options are:\n");
          printf ("--port=Portnumber\n");
          printf ("\tBy default, yaDSKYb1 attempts to connect to the yaAGCb1 program using port %d.\n", Portnum);
          printf ("\tNote that by default, yaAGCb1 listens for new connections on ports 16971-16980.\n");
          exit (1);
        }
    }


  wxInitAllImageHandlers();
  frame = new MyFrame(NULL, wxID_ANY, wxEmptyString);
  frame->Timer = new TimerClass ();
  frame->Timer->Start (PULSE_INTERVAL);
  SetTopWindow(frame);
  frame->Show();
  return true;
}
