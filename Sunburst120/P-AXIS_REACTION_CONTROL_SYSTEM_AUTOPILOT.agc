### FILE="Main.annotation"
## Copyright:	Public domain.
## Filename:	P-AXIS_REACTION_CONTROL_SYSTEM_AUTOPILOT.agc
## Purpose:	A module for revision 0 of BURST120 (Sunburst). It 
##		is part of the source code for the Lunar Module's
##		(LM) Apollo Guidance Computer (AGC) for Apollo 5.
## Assembler:	yaYUL
## Contact:	Ron Burkey <info@sandroid.org>.
## Website:	www.ibiblio.org/apollo/index.html
## Mod history:	2016-09-30 RSB	Created draft version.
##		2016-10-24 RSB	Transcribed through page 504.

## Page 492
# THE FOLLOWING T5RUPT ENTRY BEGINS THE PROGRAM WHICH CONTROLS THE P-AXIS ACTION OF THE LEM USING THE RCS JETS.
# THE NOMINAL TIME BETWEEN THE P-AXIS RUPTS IS 100 MS IN ALL NON-IDLING MODES OF THE DAP.

PAXIS           CAF             TWENTYMS                        # RESET TIMER IMMEDIATELY - DT= 20 MS
                TS              TIME5

                LXCH            BANKRUPT                        # INTERRUPT LEAD IN (CONTINUED)
                EXTEND                                          
                QXCH            QRUPT                           

# CHECK TO SEE IF DAP IS STILL IN USE:

		TC		CHECKBITS			# RETURN IS TO I+1 IF DAP SHOULD STAY ON.

# WHILE DAP ON, SET UP EITHER A KALMAN FILTER RUPT OR A DUMMY FILTER RUPT BY SETTING UP T5ADR FROM ERASABLE.

                EXTEND                                          # T5ADR IS SET TO EITHER FILTER OR
                DCA             PFILTADR                        # DUMMYFIL IN A BLIND MANNER SINCE

# START CODING FOR MODULE 3 REMAKE, AUGUST 1967***START CODING FOR MODULE 3 REMAKE, AUGUST 1967********************

		TCF		PAXISCNT			# GO DECREMENT COUNTERS.

# **END CODING FOR MODULE 3 REMAKE, AUGUST 1967*****END CODING FOR MODULE 3 REMAKE, AUGUST 1967********************

# ***** KALCMANU-DAP AND "RATE-HOLD"-DAP INTERFACE *****

# THE FOLLOWING SECTION IS EXECUTED EVERY 100 MS (10 TIMES A SECOND) WITHIN THE P-AXIS REACTION CONTROL SYSTEM
# AUTOPILOT (WHENEVER THE DAP IS IN OPERATION).

                CAF             TWO                             # SET UP LOOP TO DO Z,Y,X CDU AXES:
KALCLOOP        TS              QRCNTR

                INDEX           QRCNTR                          # KALCMANU AND RATE-HOLD USE THIS SECTION
                CAE             CDUXD                           # TO PERFORM THEIR INDEPENDENT FUNCTIONS:
                EXTEND                                          # BOTH PROCEDURES SET UP THE DELCUD'S
                INDEX           QRCNTR                          # TO HAVE THE NEGATIVE VALUE OF THE
                MSU             DELCDUX                         # DESIRED CDU CHANGE FOR EACH 100 MS CSP
                CCS             A                               # DURING THE MANEUVER (OR MODE).  EACH IS
                AD              ONE                             # STORED AT PI RADIANS IN 2'S COMPLEMENT.
                TCF             +2                              # SINCE THE MODULAR SUBTRACT YIELDS THE
                COM                                             # NEW CDUD VALUE IN 1'S COMPLEMENT, THE
                INDEX           QRCNTR                          # CCS SECTION IS NEEDED FOR 1'S TO 2'S
                TS              CDUXD                           # CONVERSION OF DESIRED CDU ANGLES.

                CCS             QRCNTR                          # (THIS MAKES THE LOOP DO ALL THREE
## Page 493
                TCF             KALCLOOP                        # AXES.  A = QRCNTR. DO NEXT DELCDU.
# DO P AXIS RATE DERIVATION AND CONTROL LAW.
# DERIVE DELTA P.

		CA		ZERO
		TS		ITEMP1
		CAE		TP
		AD		NEGCSP1
		EXTEND
		BZMF		DOTORQUE
		TS		ITEMP1
		CA		CSPAT1P
		TCF		SCALEDTP
DOTORQUE	CA		TP
		EXTEND
		MP		BIT5
		CAE		L
		EXTEND
		MP		16/25
SCALETP		TS		TP
		EXTEND
		MP		WFORP
		AD		(1-K)/8
		EXTEND
		MP		TP
		EXTEND
		MP		BIT4
		CA		1JACC
		EXTEND
		MP		L
		EXTEND
		MP		NO.PJETS
		LXCH		JETRATE
		CA		ITEMP1
		TS		TP
		
		CAE		CDUX
		TS		L
		EXTEND
		MSU		OLDXFORP			# SCALED AT PI
		LXCH		OLDXFORP
		ZL
		DXCH		DELTAP
		CAF		BIT9
		TS		Q
		CA		CDUY
		TS		L
		EXTEND
		MSU		OLDYFORP			# SCALED AT PI
		LXCH		OLDYFORP
## Page 494
		EXTEND
		MP		M11				# M11 SCALED AT 1
		DAS		DELTAP
		EXTEND
		DCA		DELTAP
		EXTEND
		DV		Q				#  NOW SCALED AT PI/64
		EXTEND
		MP		WFORP				# SCALED AT 2(4)=16, RESULT IN A AT PI/4.
		XCH		OMEGAP				# W*DELTAP IN OMEGAP LOC. OLD OMEGAP IN A.
		EXTEND
		MP		(1-K)				# SCALED AT 1
		AD		JETRATE				# RATE DUE TO JETS TORQUING.
		ADS		OMEGAP				# PRATE= WFORP*DELTAP+ALPHA*LAST-PRATE+TPF.
PAXFILT         TC              PJUMPADR
SKIPPAXS        CA              VISFZADR
                TS              PJUMPADR
                TCF             RESUME
                
CHKVISFZ        TC		T6JOBCHK			# CHECK FOR T6 RUPT.

		TCF		PURGENCY			# NO RHC INPUTS ON 206
		
# START CODING FOR MODULE 3 REMAKE, AUGUST 1967***START CODING FOR MODULE 3 REMAKE, AUGUST 1967********************

# FROM P-AXIS-
#    1. COUNT DOWN GIMBAL DRIVE TIMES.
#    2. END DRIVES WHEN APPROPRIATE.
#    3. COUNT DOWN TIME FOR FORCED TTS JUST BEFORE THROTTLE-UP.

PAXISCNT	DXCH		T5ADR				#  (PRESERVE OLD CODING)

		CCS		SIMPCNTR			# COUNT DOWN SIMPCNTR TO +0.  DECISECONDS
		TS		SIMPCNTR
		
		CCS		QGIMTIMR			# Q-AXIS GIMBAL DRIVE TIMER-
		TCF		DECQTIMR			#   POSITIVE- COUNTING DOWN
		TCF		TURNOFFQ			#   POS ZERO- DRIVE SHOULD BE ENDED
CHKRTIMR	CCS		RGIMTIMR			#   NEGATIVE- INACTIVE
		TCF		DECRTIMR			#   NEG ZERO- IMPOSSIBLE
		TCF		TURNOFFR			# REPEADED FOR R-AXIS (ABOVE).
		
CKTRMCTR	CCS		TRIMCNTR			# COUNT DOWN FOR FORCED GTS ENTRY.
		TCF		+4				#   POSITIVE- COUNTING DOWN
		TC		CCSHOLE				#   POS ZERO-IMPOSSIBLE
		TCF		CHKSMART			#   NEGATIVE- INACTIVE- RETURN
		TCF		CHKSMART			#   NEG ZERO- THIS VALUE UNTIL DRIVE DONE.
		CAF		NEGONE
		ADS		TRIMCNTR			# COUNT TRIMCNTR DOWN TO NEG ZERO.
		TCF		CHKSMART

## Page 495
DECQTIMR	TS		QGIMTIMR			# COUNT QGIMTIMR DOWN TO POS ZERO.
		TCF		CHKRTIMR
DECRTIMR	TS		RGIMTIMR			# COUNT RGIMTIMR DOWN TO POS ZERO.
		TCF		CKTRMCTR

TURNOFFQ	TS		NEGUQ				# REWRITE GIMBAL-DRIVE BITS TO HALT 0.
		TS		QACCDOT
		CS		QGIMBITS
		EXTEND
		WAND		12
		CAF		NEGMAX
		TS		QGIMTIMR			# DEACTIVATE TIMER.
		TCF		CHKRTIMR
TURNOFFR	TS		NEGUR				# REWRITE GIMBAL DRIVE BITS TO HALT R.
		TS		RACCDOT
		CS		RGIMBITS
		EXTEND
		WAND		12
		CAF		NEGMAX
		TS		RGIMTIMR			# DEACTIVE TIMER.
		TCF		CKTRMCTR
QGIMBITS	OCTAL		01400
RBIMBITS	OCTAL		06000

# FROM STARTDAP- RESTART PROTECT THE CHANNEL 11 ENGINE-ON BIT AND THE CHANNEL 12 GIMBAL-DRIVE BITS.

PROTCTOR	TS		(1-K)/8				#   (OLD CODING)

		CAE		FLAGWRD1
		MASK		ENGINBIT
		EXTEND
		BZF		INSRT16B	+1		# RETURN TO STARTDAP IF ENGINE SHOULD BE
								#   OFF.
		CAF		BIT13				# OTHERWISE-
		EXTEND
		WOR		1				# RESET ENGINE-ON BIT.
		CS		OTIMTIMR
		EXTEND
		BZMF		+3				# BRANCH IF Q-DRIVE TIMER ACTIVE.
		CAF		ZERO				# OTHERWISE ZERO NEGUQ.
		TS		NEGUQ
		CS		RGIMTIMR			# REPEAT FOR R-DRIVE.
		EXTEND
		BZMF		+3
		CAF		ZERO
		TS		NEGUR
		TC		IBNKCALL			# SET UP DRIVES ACCORDING TO NEGUS.
		FCADR		WRCHN12
		TCF		INSRT16B	+1		# RETURN TO OLD CODING.

## Page 496
NODAPNO		CAF		ULLAGER
		MASK		DAPBOOLS
		EXTEND
		BZF		ZEROFIVE
		CS		PHASENUM			# ULLAGE BIT IS SET.PROTECT MP7 +X COMMAND
		AD		SEVEN
		EXTEND
		BZF		PROTCT+X
		TCF		LEAVASIS			# THIS IS NOT MP7. THIS IS NOT COLD PURGE.
PROTCT+X	CAF		+XJETS
TWINEXIT	EXTEND
		WRITE		5
		
LEAVASIS	CAF		MS30P
		TS		TIME5
		TCF		RESUME

ZEROFIVE	CAF		ZERO
		TCF		TWINEXIT
		
+XJETS		OCT		00252

ADDLT5ID	EXTEND						# (ARRIVE IWTH BIT 11 IN A, FROM T5IDLERI)
		RAND		DSALMOUT
		CCS		A
		TCF		MORET5ID			# SMARTJOB IS ALREADY RUNNING.  NO ACTION.
		
		CCS		SMODE				# NOT RUNNING.  SEE IF SHELFCHECK WANTED.
		TCF		MORET5ID			# SELFCHECK IS ON, SO DON'T RUN SMARTJOB.
		TCF		GETSMART			# SELFCHECK IS OFF, SO START SMARTJOB.
		TCF		MORET5ID			# SELFCHECK IS ON, SO DON'T RUN SMARTJOB.
		TCF		MORET5ID			# SELFCHECK IS ON, SO DON'T RUN SMARTJOB.
		
GETSMART	CAF		PRIO1
		TC		NOVAC
		EBANK=		SMARTFLG
		2CADR		SMARTJOB
		
		CAF		BIT11				# SET THE SMARTJOB-RUNNING FLAG.
		EXTEND						# NODAPNO WILL STOP COLD FIRE PURGE AND
		BZF		NODAPNO				# RESTART-PROTECT MP 7 +X TRANSLATION.
		
		TCF		DAPIDLEI			# GODAPGO IS ON, SO RUN DAPIDLER NOW.
		
## Page 497
# SMARTJOB IS A DUMMYJOB-LIKE FUNCTION DESIGNED TO ABSORB IDLE TIME.  IT CAUSES THE COMPUTER-ACTIVITY LAMP TO
# REMAIN ON, AND PREVENTS THE EXISTENCE OF A JOB SLEEPING IN TH ELOWEST NUMBERED CORE SET.  IT IS PREVENTED FROM
# STARTING, OR MADE TO TERMINATE IF ALREADY RUNNING, BY MAKING SMARTFLG CONTAIN ANY NEGATIVE VALUE OR ZERO, OR
# BY MAKING SMODE (THE SELFCHECK CONTROL REGISTER) UNEQUAL TO +0.

SMARTJOB	CCS		NEWJOB				# ANY HIGHER PRIORITY JOB WAITING?
		TC		CHANG1				# YES.  GO DO IT.
		
		CA		SMARTFLG			# NO.  SHOULD SMARTJOB TERMINATE?
		EXTEND
		BZMF		STOPSMRT			# YES.   GO KILL IT.
		
		CCS		SMODE				# MAYBE NOT.  SEE IF SELFCHECK WANTED.
		TCF		STOPSMRT			# WANTED.  TERMINATE SMARTJOB.
		TCF		SMARTJOB			# NOT WANTED.  CONTINUE SMARTJOB.
		NOOP						# WANTED.  TERMINATE SMARTJOB.
STOPSMRT	CS		BIT11				# TERMINATE SMARTJOB.
		EXTEND						# FIRST, TURN THE SMARTJOB-RUNNING FLAG
		WAND		DSALMOUT			# OFF.
		
		TCF		ENDOFJOB			# THEN KILL JOB.
		
CHKSMART	CA		SMARTFLG			# IS SMARTJOB DESIRED?
		EXTEND
		RAND		DSALMOUT
		CCS		A
		TCF		INSRT16A	+1		# SMARTJOB IS ALREADY RUNNING.  NO ACTION.
		
		CCS		SMODE				# NOT RUNNING.  SEE IF SELFCHECK WANTED.
		TCF		INSRT16A	+1		# SELFCHECK IS ON, SO DON'T RUN SMARTJOB.
		TCF		SETSMART			# SELFCHECK IS OFF, SO START SMARTJOB.
		TCF		INSRT16A	+1		# SELFCHECK IS ON, SO DON'T RUN SMARTJOB.
		TCF		INSRT16A	+1		# DITTO.
		
SETSMART	CAF		BIT11				# SET THE SMARTJOB-RUNNING FLAG.
		EXTEND
		WOR		DSALMOUT
		
		TCF		INSRT16A	+1		# RETURN TO PAXIS.

# **END CODING FOR MODULE 3 REMAKE, AUGUST 1967*****END CODING FOR MODULE 3 REMAKE, AUGUST 1967********************

## Page 498
# THE FOLLOWING CODING IS LEFT IN PLACE TO PRESERVE ADDRESSES.

		EXTEND
		MP		BIT3				# ENOUGH FOR 4 JETS
		CAE		L
		EXTEND
		MP		25/35				# A CONTAINS TJET SCALED AT 2EXP(4)(16/25)
		TS		TP
		TS		TOFJTCHG
		
		CAE		PRATEDIF			# TEST WHETHER 2 OR 4 JETS TO BE USED BY
		AD		-2JETLIM			# COMPARING DELTA RATE WITH 2 JET LIMIT
		EXTEND
		BZMF		+4				# IF NEGATIVE, 2 JETS ARE ENOUGH
		
		CAF		POSMAX				# POSITIVE, NON-ZERO.  PUT POSMAX IN NJET
		TS		NJET
		TCF		PJETSLEC			# AND TO SELECT GOOD POLICY
		
		CAF		NEGMAX				# 2 JETS, PUT NEGMAX IN NJET.
		TS		NJET
		CAE		TP				# DOUBLE TP.
		DOUBLE
		TS		TP				# AND GO CHECK MINIMUM IMPULSE
		
# ........................................................................ 
# CHECK RATE COMMAND ON TIME AGAINST MINIMUM IMPULSE
                TS              TOFJTCHG
                AD              -TJMINT6
                EXTEND                                          #   AS TP. TEST JET TIME. IS IT GREATER OR
                BZMF            JETSOFF                         # LESS THAN A MINIMUM IMPULSE
# ........................................................................ 

## Page 499
# PROGRAM NAME: PJETSLEC			DATE: DECEMBER 9, 1966

# MODIFICATION 2 TO SUNBURST REVISTION 58 ON DECEMBER 30, 1966 BY JOHN BLISS(ADAMS ASSOCIATES) RM 7-286, X183

# LOG SECTION: P-AXIS REACTION CONTROL SYSTEM AUTOPILOT -- FIRST PUT INTO SUNBURST(III) REVISION 29


# FUNCTIONAL DESCRIPTION:

#     THE OBJECT OF PJETSLEC IS TO CHOOSE THE BEST JET POLICY WHOSE NECESSARY JETS HAVE NOT BEEN RECORDED AS
# FAILED IN THE CH6MASK REGISTER.  THE CONDITIONS ON SELECTION ARE THE NUMBER OF JETS REQUESTED(2 OR 4), THE
# SENSE OF P-AXIS ROTATION REQUIRED(+/-), AND ALTERNATING USE OF DIAGONAL FORCE-COUPLED PAIRS OF JETS.

#     PJETSLEC FIRST READS CHANNEL 6 TO SEE IF THE JETS ARE CURRENTLY FIRING.  IF THEY ARE OFF, THE DIAGONAL JETS
# ARE SWITCHED TO COMPLY WITH THE ALTERNATION CONDITION, AS THERE IS NO DANGER OF SWITCHING ONE OFF AND THE OTHER
# ON IN RAPID SUCCESSION.  AFTER SWITCHING THE DIAGONALS, OR IF THE JETS ARE ON, 6.5 MS IS ADDED TO THE JET
# FIRING TIME, TOFJTCHG, TO ALLOW FOR DELAY IN TURNING ON THE JETS OR IN CASE THE CURRENT POLICY HAS SUFFERED A
# JET FAILURE AND JUST BE REPLACED.  HOWEVER, IF THE SAME JET POLICY IS SELECTED, THE FACT WILL BE DETECTED BEFORE
# THE POLICY IS WRITTEN INTO CHANNEL 6, THE UNNECESSARY 6.5MS DELAY TIME WILL BE DEDUCTED FROM TOFJTCHG.  THE TIME
# OF CALCULATION, 5MS, IS SUBTRACTED AT THE SAME TIME IN THE COMBINED CONSTANT, -COM-6.5 = -11.5MS.  NOTE THAT IN
# CASE JET FAILURE REQUIRES SELECTION OF A NEW POLICY, TOFJTCHG IS NOT MODIFIED BY -5MS, AND SO THERE WILL BE AN
# OVERSHOOT OF 5MS OF JET FIRING.

#     NEXT, THE SENSE OF P-AXIS ROTATION(ROLL) IS TESTED, TO DETERMINE WHICH SET OF JET POLICIES MUST BE INDEXED.

#     IF THE P-AXIS IS +, REL = 7, IF -, REL = 0,.  NJET IS TESTED NEXT; IF POSMAX, 4 JETS DESIRED, REL = REL + 6,
# CTR = 6.  IF NEGMAX, 2 JETS DESIRED, REL = REL + 5, CTR = 5.  IF 4 JETS DESIRED, GO TO POLICY TESTING LOOP
# WITHOUT TESTING TO SEE WHICH DIAGONAL PAIR IS PREFERRED THIS TIME.

#     IF 2 JETS ARE DESIRED, SEE WHETHER NO. 2 PAIR IS PREFERRED.  IF IT IS, TEST IT FIRST AND USE IT IF IT'S OK.
# IF IT HAS FAILED, GO TO THE TEST LOOP TO TEST THE POLICIES IN ORDER.  IF NO. 1 POLICY IS PREFERRED, GO DIRECTLY
# TO THE TEST LOOP.

#     THE TEST LOOP USES REL TO PICK P THE NEXT POLICY IN PPOLTABLE AND CTR TO KEEP TRACK OF THE NUMBER OF
# POLICIES(1-7) TESTED.  WHEN A GOOD POLICY IS FOUND, IT IS WRITTEN INTO CHANNEL 6, OTHERWISE THE NEXT POLICY IS
# TRIED.  IF NO GOOD POLICIES ARE FOUND, CONTROL GOES TO ABORTJET TO TURN OFF THE JETS AND THE DAP.

#     WHEN A GOOD POLICY IS FOUND, CONTROL TRANSFERS TO WRITEPOL.  THERE, THE SELECTED POLICY IS COMPARED TO THE
# CURRENT POLICY IN CHANNEL 6.  IF THEY ARE NOT THE SAME, EITHER THE JETS HAVE NOT BEEN ON, OR A JET FAILED IN THE
# CURRENT POLICY.  IN EITHER CASE, TOFJTCHG HAS ALREADY BEEN INCREASED BY THE 6.5MS JET FIRE DELAY.  AS DESCRIBED
# ABOVE, HOWEVER, THE EFFECT OF THE OLD POLICY FIRING DURING THE COMPUTATION IS NOT TAKEN INTO ACCOUND.  THIS IS
# CONSIDERED SAFER, SINCE OTHERWISE, A TOFJTCHG ALREADY CALCULATED NEAR THE MINIMUM IMPULSE TIME MIGHT BE REDUCED
# TO LESS THAN 14MS AND THE RESULT WOULD BE THE EXPLOSION OF THE JETS.

#     IF THE JET POLICY IS THE SAME AS THE LAST ONE, THE 6.5MS DELAY TIME IS DEDUCTED FROM TOFJTCHG, AND IN ANY
# CASE, THE POLICY IS WRITTEN INTO CHANNEL 6, +/-2/4 IS STORED IN NO-PJETS, AND BIT9 IS PUT INTO JTSATCHG TO CAUSE
# THE P-AXIS JETS TO BE TURNED OFF ON THE NEXT T6RUPT.  CONTROL THEN TRANSFERS TO SKIPTEST.

# CALING SEQUENCES: NONE                       SUBROUTINES CALLED:

## Page 500
#						WRITEP - WRITES C(A). THE
#						SELECTED JET POLICY, INTO
#						CHANNEL 6

# NORMAL EXIT MODES:                           	ALARM OR ABORT EXIT MODES:

#     TCF SKIPTEST                                       EXTEND
#							 DCA    ABORTADR
#							 TTCB

# 							 EBANK= JTSONNOW
#						ABORTADR 2CADR  ABORTJET

#						THIS SEQUENCE IS FOLLOWED
#						IF NONE OF THE POLICIES IS
#						WITHOUT JET FAILURES

# ERASABLE INITIALIZATION REQUIRED

#     TP	=  ) TIME PERIOD OF JET FIRING
#     TOFJTCHG	=  ) AT T6 SCALING, 625 MICROSECONDS PER BIT
#     NJET	=  37777, 40000, DEPENDING ON WHETHER 4 OR 2 JETS DESIRED
#     TJETSIGN	= +/-00001, DEPENDING ON DESIRED SENSE OF P-AXIS ROTATION
#     CH6MASK	=  BITS 1-8 INDICATE WHETHER CORRESPONDING JETS HAVE FAILED - BIT ON IS FAILURE, BIT OFF IS OK.
#     DAPBOOLS,BIT5(AORBSYST) =0/1, DEPENDING UPON WHETHER DIAGONAL 1 OR DIAGONAL 2 WAS PREFERRED DURING LAST PASS

# OUTPUT:

#     CHANNEL 6 - CONTAINS SELECTED JET POLICY UNLESS NONE IS AVAILABLE
#     NO.PJETS	- +/-2/4, SENSE OF P-AXIS ROTATION AND NUMBER OF JETS USED
#		  BY POLICY ACTUALLY SELECTED(MAY NOT = 4 IF 4 JETS RE-
#		  QUESTED BUT ONE OR MORE JETS FAILED)
#     TOFJTCHG	- MODIFIED BY -5MS OR +6.5MS OR NEITHER, DEPENDING ON WHETHER THE JETS WERE ON, AND WHETHER THE
#		  NEW POLICY IS A CHANGES FROM THE OLD OR NOT.
#     DAPBOOLS, BIT5(AORBSYST) = 1/0, IF THE INPUT VALUE WAS 0/1, UNLESS JETS WERE ON WHEN PJETSLEC STARTED.

#     JTSATCHG	- = BIT9, UNLESS NO POLICIES AVAILABLE

#     NJET, TP, TJETSIGN, AND CH6MASK NOT CHANGED BY PJETSLEC

#     REL AND CTR ARE LEFT AT THEIR LAST VALUES WHEN THE GOOD POLICY WAS
#     FOUND

# DEBRIS:

#     REL = ITEMP5
#     CTR = ITEMP6
#     A,L,Q

PJETSLEC	EXTEND	 					# BEGIN JET SELECT ROUTINE BY SEEING WHE-
## Page 501
		READ		6				# THER THE JETS ARE TURNED ON(CHANNEL 6
		CCS		A				# NON-ZERO)
		TCF		ADDELAY				# JETS ON, DON'T SWITCH DIAGONALS.
		
		CAF		AORBSYST			# JETS NOT ON NOW, START BY SWITCHING BIT5
		LXCH		DAPBOOLS			# IN DAPBOOLS
		EXTEND						# BIT5 ON - DIAGONAL JETS 15, 7 AND 8, 16
		RXOR		L
		TS		DAPBOOLS			# BIT5 OFF - DIAGONAL JETS 4, 12 AND 3, 11
		
ADDELAY		CAF		14-TJMIN			# ADD DELAY TIME BECAUSE JETS USUALLY OFF
		ADS		TOFJTCHG			# AND EASIER IF JET POLICY NOW HAS FAILED.
		
		CAF		ZERO				# BEFORE TESTING P-AXIS SIGN.
		TS		REL				# INITIALIZE ADDRESSING INDEX AT ZERO
		CCS		TJETSIGN			# TEST DIRECTION OF P-AXIS ROTATION(ROLL)
		CAF		SEVEN				# IF POSITIVE, GET POLICY FROM LOWER SEVEN
		ADS		REL				# LOCATIONS OF TABLE
		
		CCS		NJET				# SET IF 4-JET POLICY IS REQUESTED
		CAF		SIX				# IT IS, PICK UP 6 FOR REL AND CTR
		TCF		FOURJETS			# AND GO STORE THEM
		CAF		FIVE				# 2 JETS ONLY REQUESTED, PICK UP 5, STORE
		TS		CTR				# IN CTR AND ADD TO REL.
		ADS		REL
		CS		DAPBOOLS			# CHECK BIT5 IN DAPBOOLS TO SEE WHICH PAIR
		MASK		AORBSYST			# OF DIAGONAL JETS SHOULD BE USED NEXT
		CCS		A
		TCF		TESTPOL				# FIRST PAIR, SO GO TO TESTING LOOP NOW
		
		EXTEND						# SECOND PAIR, DECREMENT REL TO 4 OR 11.
		DIM		REL
		INDEX		REL				# PICK UP SECOND DIAGONAL PAIR FROM POLICY
		CAF		PPOLTABL
		MASK		CH6MASK				# TABLE AND COMPARE WITH FAILURE BITS
		EXTEND
		BZF		WRITEPOL			# THE JETS ARE GOOD, GO WRITE IN CHANNEL
		
		INCR		REL				# THE JET(S) HAVE FAILED FOR THIS POLICY,
		TCF		TESTPOL				# RESTORE REL AND DO TEST POLICY LOOP
		
FOURJETS	ADS		REL				# COME HERE TO SET REL AND CTR FOR 4-JET
		CAF		SIX				#         ****ADS STINKS****
		TS		CTR				# POLICY REQUESTED.  ALSO, SET CTR -1 HERE
		
TESTPOL		INDEX		REL				# PICK UP NEXT POLICY AS LOCATED RELATIVE
		CAF		PPOLTABL			# TO PPOLTABL BY REL.
		MASK		CH6MASK				# COMPARE WITH FAILURE BITS
		EXTEND		
		BZF		WRITEPOL			# THE JETS ARE GOOD, WRITE IN THE CHANNEL
## Page 502
		EXTEND						# THE JET(S) HAVE FAILED FOR THIS POLICY
		DIM		REL				# DECREMENT THE INDEX.
		CCS		CTR				# SEE IF ALL POLICIES HAVE BEEN TESTED.
		TCF		TESTPOL	-1			# CTR NOT ZERO, A = CTR -1, DO LOOP AGAIN
		EXTEND						# CTR ZERO, ALL ALLOWABLE POLICIES FAILED
		DCA		ABORTADR			# PICK UP 2CADR OF ABORTJET
		DTCB						# AND GO THERE

WRITEPOL	INDEX		REL				# A GOOD POLICY IS FOUND, PICK IT UP AND
		CAF		PPOLTABLE	
		EXTEND						# BEFORE WRITING IT, CHECK TO SEE IF THE
		RXOR		6				# SAME POLICY IS CURRENTLY IN CHANNEL 6.
		EXTEND
		BZF		SAMEJETS			# SAME POLICY, GO ADJUST TOFJTCHG
OK2WRITE	INDEX		REL				# DIFFERENT POLICY(CHANNEL 6 WAS ZERO OF A
		CAF		PPOLTABL			# JET FAILED IN LAST POLICY).  GET POLICY,
		TC		WRITEP				# GO WRITE IT IN CHANNEL 6 AND RETURN
		
		CCS		A				# THE POLICY IS STILL IN A, TEST NUMBER OF
		CAF		TWO
		TCF		+2				# JETS(BIT15 ON FOR 4-JET POLICIES) AND
		CAF		FOUR
		EXTEND						# MULTIPLY BY TJETSIGN(+/-1) TO GET +/-2,4
		MP		TJETSIGN
		LXCH		NO.PJETS			# IN L, WHICH IS THEN STORED IN NO-PJETS
		
		CAF		BIT9				# TURN OFF P-AXIS JETS AFTER T6RJPT
		TS		JTSATCHG
		
		TCF		SKIPTEST			# CHECK FOR SKIP.PERHAPS TO DO JETLIST
		
SAMEJETS	CAF		-COM-6.5			# COME HERE TO ADJUST TOFJTCHG BY FACTOR
		ADS		TOFJTCHG			# OF 11.5MS(COMP TIME + MINIMP DELAY) WHEN
		TCF		OK2WRITE			# CURRENT JET POLICY IS TO BE MAINTAINED.
		
		EBANK=		JTSONNOW			# WOULD YOU BELIEVE, EBANK = 6
ABORTADR	2CADR		ABORTJET			# WHERE TO GO WHEN ALL JET POLICIES FAIL
# ................................................................................................................

# TABLE OF P-AXIS JET POLICIES IS ASSEMBLED HERE TO BE ADDRESSED BY RELATIVE INDEX FROM BASE ADDRESS PPOLTABLE

#				CHANNEL 6 BITS		  	  INDEX				   JETS ON

PPOLTABL	OCTAL		00202				# REL=0      -P NON-FORCE COUPLE 4- 16, 3
		OCTAL		00210				# REL=1	     -P NON-FORCE COUPLE 3- 11, 16
		OCTAL		00050				# REL=2	     -P NON-FORCE COUPLE 2- 8, 11
		OCTAL		00042				# REL=3	     -P NON-FORCE COUPLE 1- 3, 8
		OCTAL		00240  				# REL=4	     NUMBER TWO FORCE COUPLE- 8, 16
		OCTAL		00012				# REL=5      -P 2-JET FORCE COUPLE- 3, 11
## Page 503
		OCTAL		40252				# REL=6      -P 4-JET POLICY- 3, 8, 11, 16
		
		OCTAL		00101				# REL=7	     +P NON-FORCE COUPLE 4- 7, 4
		OCTAL		00021				# REL=8D     +P NON-FORCE COUPLE 3- 12, 7
		OCTAL		00024				# REL=9D     +P NON-FORCE COUPLE 2- 15, 12
		OCTAL		00104				# REL=10D    +P NON-FORCE COUPLE 1- 4, 15
		OCTAL		00005				# REL=11D    NUMBER TWO FORCE COUPLE- 15, 7
		OCTAL		00120				# REL=12D    +P 2-JET FORCE COUPLE- 4, 12
		OCTAL		40125				# REL=13D    +P 4-JET POLICY- 4, 15, 12, 7

# ................................................................................................................

JETSOFF		CAF		ZERO
		TS		TP
		TS		TOFJTCHG
		TC		WRITEP				# TURN ON P JETS USING T6JOB SUBROUTINE
		TCF		RESUME
# P-AXIS URGENCY FUNCTION CALCULATION

# (NOTE -- M13 = 1 IDENTICALLY IMPLIES NULL MULTIPLICATION.)

PURGENCY	CA		CDUY				# P-ERROR CALCULATION
		EXTEND
		MSU		CDUYD				# CDU VALUE - ANGLE DESIRED (Y-AXIS)
		EXTEND
		MP		M11				# (CDUY-CDUYD)M11 SCALED AT PI RADIANS
		XCH		E				# SAVE FIRST TERM (OF TWO)
		CA		CDUX				# THIRD COMPONENT
		EXTEND
		MSU		CDUXD				# CDU VALUE - ANGLE DESIRED (X-AXIS)
		EXTEND
		MP		M13
		ADS		E				# SAVE SUM OF TERMS, NO OVERFLOW EVR
		
		TS		PERROR				# SAVE P ERROR FOR DISPLAY
		
		CS		OMEGAPD				# THIS CODING IS COMMON TO BOTH LM DAP AND
		AD		OMETAP				# SPS-BACKUP MODE.
		TS		EDOTP				# EDOTP = OMEGAP - OMEGAPD AT PI/4 RAD/SEC
		
## Page 504
